{"version":3,"sources":["contracts sync /^/.*/.abi/.js$","contracts sync /^/.*/.bytecode/.js$","contracts sync /^/.*/.address/.js$","contracts/NFTMinter.address.js","contracts/NFTMinter.abi.js","contracts/NFTMinter.bytecode.js","contracts/contracts.js","hooks/OnBlock.js","hooks/Poller.js","hooks/Balance.js","hooks/ContractExistsAtAddress.js","hooks/ContractLoader.js","hooks/LookupAddress.js","constants.js","hooks/UserProvider.js","components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Header.jsx","components/Minter.jsx","components/NFTViewer.jsx","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","index.jsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","setInterval","clearInterval","useBalance","address","pollTime","useState","balance","setBalance","pollBalance","useCallback","a","getBalance","newBalance","useContractExistsAtAddress","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","isAddress","getCode","bytecode","loadContract","contractName","signer","newContract","Contract","require","console","log","useContractLoader","providerOrSigner","contracts","setContracts","listAccounts","accounts","getSigner","contractList","newContracts","reduce","accumulator","loadContracts","lookupAddress","reportedName","resolveName","resolvedAddress","getAddress","useLookupAddress","ensName","setEnsName","cache","window","localStorage","getItem","JSON","parse","timestamp","Date","now","name","then","setItem","stringify","NFT_STORAGE_KEY","INFURA_ID","NETWORK","chainId","n","NETWORKS","localhost","color","blockExplorer","rpcUrl","location","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","matic","mumbai","useUserProvider","injectedProvider","localProvider","useMemo","burnerConfig","pathname","indexOf","rawPK","incomingPK","hash","replace","privateKey","history","pushState","currentPrivateKey","connection","url","Web3Provider","BurnerProvider","networkName","_network","Text","Typography","Address","props","value","ens","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","size","text","etherscanLink","blockExplorerLink","minimized","style","verticalAlign","target","href","rel","seed","toLowerCase","scale","onChange","editable","copyable","fontSize","paddingLeft","Balance","dollarMode","setDollarMode","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","onClick","Transactor","etherscan","tx","getNetwork","network","options","dappId","system","networkId","transactionHandler","txInformation","notify","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","transaction","onclick","open","notification","info","message","description","placement","error","Blockie","AddressInput","setValue","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","newValue","possibleAddress","scanner","zIndex","position","left","top","width","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","ethValue","Paragraph","Wallet","receiveButton","privateKeyButton","signerAddress","useUserAddress","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","key","KeyOutlined","wallet","ethers","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","createRandom","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","userProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","utils","constants","tryToDisplay","thing","toNumber","formatUnits","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputIndex","inputs","input","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","BigNumber","from","toHexString","payable","buttonIcon","defaultValue","bordered","height","innerIndex","baseType","stateMutability","returned","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","aria-label","contract","customContract","account","show","displayedContractFunctions","values","interface","functions","filter","contractDisplay","isQueryable","connect","Header","subTitle","ownerAddress","setStatus","image","client","NFTStorage","token","store","metadata","metadataURI","transactor","mintToken","wait","receipt","tokenId","events","toString","Minter","file","setFile","previewURL","setPreviewURL","nftName","setName","setDescription","minting","setMinting","status","setTokenId","uploadButton","PlusOutlined","uploadView","accept","listType","showUploadList","action","beforeUpload","fileList","URL","createObjectURL","preview","src","maxWidth","nameField","descriptionField","TextArea","mintEnabled","mintButton","mintNFT","newTokenId","LoadingOutlined","makeGatewayURL","ipfsURI","fetchIPFSJSON","fetch","resp","json","tokenURI","NFTViewer","selectedToken","setSelectedToken","nftData","setNFTData","setLoading","errorMessage","setErrorMessage","tokenView","NFTCard","errorView","getNFT","nft","catch","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","right","bottom","checked","isChecked","dark","light","targetNetwork","scaffoldEthProvider","StaticJsonRpcProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","infuraId","clearCachedProvider","setTimeout","ethereum","App","setInjectedProvider","setPrice","DAI","Token","Fetcher","fetchPairData","WETH","pair","route","Route","midPrice","toSignificant","getPrice","useExchangePrice","speed","setGasPrice","loadGasPrice","axios","get","response","newGasPrice","data","useGasPrice","localChainId","selectedChainId","faucetTx","yourLocalBalance","yourMainnetBalance","readContracts","writeContracts","networkDisplay","networkSelected","networkLocal","closable","setRoute","faucetHint","selectedKeys","Item","exact","path","prevTheme","subgraphUri","ApolloClient","uri","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById"],"mappings":"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","file":"static/js/main.84486f0d.chunk.js","sourcesContent":["var map = {\n\t\"./NFTMinter.abi.js\": 884\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 497;","var map = {\n\t\"./NFTMinter.bytecode.js\": 885\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 498;","var map = {\n\t\"./NFTMinter.address.js\": 883\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 882;","module.exports = \"0x5fd7753d008c4cF1c5a8d84C7b44031e386B42E9\";","module.exports = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"tokenName\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"symbol\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"approved\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Approval\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"bool\",\n        \"name\": \"approved\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"name\": \"ApprovalForAll\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"baseURI\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"getApproved\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"isApprovedForAll\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"metadataURI\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"mintToken\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"ownerOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"safeTransferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"_data\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"name\": \"safeTransferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"approved\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"name\": \"setApprovalForAll\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"bytes4\",\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\"\n      }\n    ],\n    \"name\": \"supportsInterface\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"index\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tokenByIndex\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"index\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tokenOfOwnerByIndex\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tokenURI\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];","module.exports = \"0x60806040523480156200001157600080fd5b50604051620020fa380380620020fa833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405250839150829050620001b56301ffc9a760e01b6200024a565b8151620001ca906006906020850190620002e8565b508051620001e0906007906020840190620002e8565b50620001f36380ac58cd60e01b6200024a565b62000205635b5e139f60e01b6200024a565b6200021763780e9d6360e01b6200024a565b5050604080518082019091526007815266697066733a2f2f60c81b60208201526200024290620002cf565b505062000394565b6001600160e01b03198082161415620002aa576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b8051620002e4906009906020840190620002e8565b5050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200032057600085556200036b565b82601f106200033b57805160ff19168380011785556200036b565b828001600101855582156200036b579182015b828111156200036b5782518255916020019190600101906200034e565b50620003799291506200037d565b5090565b5b808211156200037957600081556001016200037e565b611d5680620003a46000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80634f6ccce7116100a257806395d89b411161007157806395d89b411461040a578063a22cb46514610412578063b88d4fde14610440578063c87b56dd14610506578063e985e9c51461052357610116565b80634f6ccce7146103a25780636352211e146103bf5780636c0360eb146103dc57806370a08231146103e457610116565b806318160ddd116100e957806318160ddd1461023a57806323b872dd146102545780632f745c591461028a5780633d02d0c9146102b657806342842e0e1461036c57610116565b806301ffc9a71461011b57806306fdde0314610156578063081812fc146101d3578063095ea7b31461020c575b600080fd5b6101426004803603602081101561013157600080fd5b50356001600160e01b031916610551565b604080519115158252519081900360200190f35b61015e610574565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610198578181015183820152602001610180565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f0600480360360208110156101e957600080fd5b503561060a565b604080516001600160a01b039092168252519081900360200190f35b6102386004803603604081101561022257600080fd5b506001600160a01b03813516906020013561066c565b005b610242610747565b60408051918252519081900360200190f35b6102386004803603606081101561026a57600080fd5b506001600160a01b03813581169160208101359091169060400135610758565b610242600480360360408110156102a057600080fd5b506001600160a01b0381351690602001356107af565b610242600480360360408110156102cc57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156102f757600080fd5b82018360208201111561030957600080fd5b8035906020019184600183028401116401000000008311171561032b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506107da945050505050565b6102386004803603606081101561038257600080fd5b506001600160a01b03813581169160208101359091169060400135610808565b610242600480360360208110156103b857600080fd5b5035610823565b6101f0600480360360208110156103d557600080fd5b5035610839565b61015e610861565b610242600480360360208110156103fa57600080fd5b50356001600160a01b03166108c2565b61015e61092a565b6102386004803603604081101561042857600080fd5b506001600160a01b038135169060200135151561098b565b6102386004803603608081101561045657600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561049157600080fd5b8201836020820111156104a357600080fd5b803590602001918460018302840111640100000000831117156104c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a90945050505050565b61015e6004803603602081101561051c57600080fd5b5035610aee565b6101426004803603604081101561053957600080fd5b506001600160a01b0381358116916020013516610d6f565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106005780601f106105d557610100808354040283529160200191610600565b820191906000526020600020905b8154815290600101906020018083116105e357829003601f168201915b5050505050905090565b600061061582610d9d565b6106505760405162461bcd60e51b815260040180806020018281038252602c815260200180611c1f602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061067782610839565b9050806001600160a01b0316836001600160a01b031614156106ca5760405162461bcd60e51b8152600401808060200182810382526021815260200180611ccf6021913960400191505060405180910390fd5b806001600160a01b03166106dc610daa565b6001600160a01b031614806106fd57506106fd816106f8610daa565b610d6f565b6107385760405162461bcd60e51b8152600401808060200182810382526038815260200180611b726038913960400191505060405180910390fd5b6107428383610dae565b505050565b60006107536002610e1c565b905090565b610769610763610daa565b82610e27565b6107a45760405162461bcd60e51b8152600401808060200182810382526031815260200180611cf06031913960400191505060405180910390fd5b610742838383610ecb565b6001600160a01b03821660009081526001602052604081206107d19083611017565b90505b92915050565b60006107e6600a611023565b60006107f2600a61102c565b90506107fe8482611030565b6107d1818461104e565b61074283838360405180602001604052806000815250610a90565b6000806108316002846110b1565b509392505050565b60006107d482604051806060016040528060298152602001611bd460299139600291906110cd565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106005780601f106105d557610100808354040283529160200191610600565b60006001600160a01b0382166109095760405162461bcd60e51b815260040180806020018281038252602a815260200180611baa602a913960400191505060405180910390fd5b6001600160a01b03821660009081526001602052604090206107d490610e1c565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106005780601f106105d557610100808354040283529160200191610600565b610993610daa565b6001600160a01b0316826001600160a01b031614156109f9576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000610a06610daa565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610a4a610daa565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b610aa1610a9b610daa565b83610e27565b610adc5760405162461bcd60e51b8152600401808060200182810382526031815260200180611cf06031913960400191505060405180910390fd5b610ae8848484846110e4565b50505050565b6060610af982610d9d565b610b345760405162461bcd60e51b815260040180806020018281038252602f815260200180611ca0602f913960400191505060405180910390fd5b60008281526008602090815260408083208054825160026001831615610100026000190190921691909104601f810185900485028201850190935282815292909190830182828015610bc75780601f10610b9c57610100808354040283529160200191610bc7565b820191906000526020600020905b815481529060010190602001808311610baa57829003601f168201915b505050505090506000610bd8610861565b9050805160001415610bec5750905061056f565b815115610cad5780826040516020018083805190602001908083835b60208310610c275780518252601f199092019160209182019101610c08565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310610c6f5780518252601f199092019160209182019101610c50565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529250505061056f565b80610cb785611136565b6040516020018083805190602001908083835b60208310610ce95780518252601f199092019160209182019101610cca565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310610d315780518252601f199092019160209182019101610d12565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006107d4600283611211565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610de382610839565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006107d48261102c565b6000610e3282610d9d565b610e6d5760405162461bcd60e51b815260040180806020018281038252602c815260200180611b46602c913960400191505060405180910390fd5b6000610e7883610839565b9050806001600160a01b0316846001600160a01b03161480610eb35750836001600160a01b0316610ea88461060a565b6001600160a01b0316145b80610ec35750610ec38185610d6f565b949350505050565b826001600160a01b0316610ede82610839565b6001600160a01b031614610f235760405162461bcd60e51b8152600401808060200182810382526029815260200180611c776029913960400191505060405180910390fd5b6001600160a01b038216610f685760405162461bcd60e51b8152600401808060200182810382526024815260200180611b226024913960400191505060405180910390fd5b610f73838383610742565b610f7e600082610dae565b6001600160a01b0383166000908152600160205260409020610fa0908261121d565b506001600160a01b0382166000908152600160205260409020610fc39082611229565b50610fd060028284611235565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006107d1838361124b565b80546001019055565b5490565b61104a8282604051806020016040528060008152506112af565b5050565b61105782610d9d565b6110925760405162461bcd60e51b815260040180806020018281038252602c815260200180611c4b602c913960400191505060405180910390fd5b6000828152600860209081526040909120825161074292840190611a2c565b60008080806110c08686611301565b9097909650945050505050565b60006110da84848461137c565b90505b9392505050565b6110ef848484610ecb565b6110fb84848484611446565b610ae85760405162461bcd60e51b8152600401808060200182810382526032815260200180611af06032913960400191505060405180910390fd5b60608161115b57506040805180820190915260018152600360fc1b602082015261056f565b8160005b811561117357600101600a8204915061115f565b60008167ffffffffffffffff8111801561118c57600080fd5b506040519080825280601f01601f1916602001820160405280156111b7576020820181803683370190505b50859350905060001982015b831561120857600a840660300160f81b828280600190039350815181106111e657fe5b60200101906001600160f81b031916908160001a905350600a840493506111c3565b50949350505050565b60006107d183836115ae565b60006107d183836115c6565b60006107d1838361168c565b60006110da84846001600160a01b0385166116d6565b8154600090821061128d5760405162461bcd60e51b8152600401808060200182810382526022815260200180611ace6022913960400191505060405180910390fd5b82600001828154811061129c57fe5b9060005260206000200154905092915050565b6112b9838361176d565b6112c66000848484611446565b6107425760405162461bcd60e51b8152600401808060200182810382526032815260200180611af06032913960400191505060405180910390fd5b8154600090819083106113455760405162461bcd60e51b8152600401808060200182810382526022815260200180611bfd6022913960400191505060405180910390fd5b600084600001848154811061135657fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816114175760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113dc5781810151838201526020016113c4565b50505050905090810190601f1680156114095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061142a57fe5b9060005260206000209060020201600101549150509392505050565b600061145a846001600160a01b031661189b565b61146657506001610ec3565b6000611574630a85bd0160e11b61147b610daa565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114e25781810151838201526020016114ca565b50505050905090810190601f16801561150f5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001611af0603291396001600160a01b03881691906118a1565b9050600081806020019051602081101561158d57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b6000818152600183016020526040812054801561168257835460001980830191908101906000908790839081106115f957fe5b906000526020600020015490508087600001848154811061161657fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061164657fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506107d4565b60009150506107d4565b600061169883836115ae565b6116ce575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107d4565b5060006107d4565b60008281526001840160205260408120548061173b5750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556110dd565b8285600001600183038154811061174e57fe5b90600052602060002090600202016001018190555060009150506110dd565b6001600160a01b0382166117c8576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b6117d181610d9d565b15611823576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b61182f60008383610742565b6001600160a01b03821660009081526001602052604090206118519082611229565b5061185e60028284611235565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b3b151590565b60606110da8484600085856118b58561189b565b611906576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106119445780518252601f199092019160209182019101611925565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146119a6576040519150601f19603f3d011682016040523d82523d6000602084013e6119ab565b606091505b50915091506119bb8282866119c6565b979650505050505050565b606083156119d55750816110dd565b8251156119e55782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156113dc5781810151838201526020016113c4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282611a625760008555611aa8565b82601f10611a7b57805160ff1916838001178555611aa8565b82800160010185558215611aa8579182015b82811115611aa8578251825591602001919060010190611a8d565b50611ab4929150611ab8565b5090565b5b80821115611ab45760008155600101611ab956fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a26469706673582212201b0e362d4a11f355ff54a3a38c35e2754577cd74ff71cadc3de349e88292e9c364736f6c63430007060033\";","module.exports = [\"NFTMinter\"];","import { useEffect, useRef } from \"react\";\r\n\r\n// helper hook to call a function regularly in time intervals\r\nconst DEBUG = false;\r\n\r\nexport default function useOnBlock(provider, fn, args) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest fn.\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [fn]);\r\n\r\n  // Turn on the listener if we have a function & a provider\r\n  useEffect(() => {\r\n    if (fn && provider) {\r\n      const listener = blockNumber => {\r\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\r\n\r\n        if (args && args.length > 0) {\r\n          savedCallback.current(...args);\r\n        } else {\r\n          savedCallback.current();\r\n        }\r\n      };\r\n\r\n      provider.on(\"block\", listener);\r\n\r\n      return () => {\r\n        provider.off(\"block\", listener);\r\n      };\r\n    }\r\n  }, [provider]);\r\n}\r\n","import { useEffect, useRef } from \"react\";\r\n\r\n// helper hook to call a function regularly in time intervals\r\n\r\nexport default function usePoller(fn, delay, extraWatch) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest fn.\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [fn]);\r\n  // Set up the interval.\r\n  // eslint-disable-next-line consistent-return\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n  // run at start too\r\n  useEffect(() => {\r\n    fn();\r\n  }, [extraWatch]);\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport useOnBlock from \"./OnBlock\";\r\nimport usePoller from \"./Poller\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets your balance in ETH from given address and provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address and get balance corresponding to given address\r\n  - Change provider to access balance on different chains (ex. mainnetProvider)\r\n  - If no pollTime is passed, the balance will update on every new block\r\n*/\r\n\r\nconst DEBUG = false;\r\n\r\nexport default function useBalance(provider, address, pollTime = 0) {\r\n  const [balance, setBalance] = useState();\r\n\r\n  const pollBalance = useCallback(\r\n    async (provider, address) => {\r\n      if (provider && address) {\r\n        const newBalance = await provider.getBalance(address);\r\n        if (newBalance !== balance) {\r\n          setBalance(newBalance);\r\n        }\r\n      }\r\n    },\r\n    [provider, address],\r\n  );\r\n\r\n  // Only pass a provider to watch on a block if there is no pollTime\r\n  useOnBlock(pollTime === 0 && provider, () => {\r\n    if (provider && address && pollTime === 0) {\r\n      pollBalance(provider, address);\r\n    }\r\n  });\r\n\r\n  // Use a poller if a pollTime is provided\r\n  usePoller(\r\n    async () => {\r\n      if (provider && address && pollTime > 0) {\r\n        if (DEBUG) console.log(\"polling!\", address);\r\n        pollBalance();\r\n      }\r\n    },\r\n    pollTime,\r\n    provider && address,\r\n  );\r\n\r\n  return balance;\r\n}\r\n","import { isAddress } from \"@ethersproject/address\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\r\n\r\n  ~ How can I use? ~\r\n\r\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide contractAddress to check if the contract is deployed\r\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\r\n*/\r\n\r\nconst useContractExistsAtAddress = (provider, contractAddress) => {\r\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\r\n\r\n  // We can look at the blockchain and see what's stored at `contractAddress`\r\n  // If we find code then we know that a contract exists there.\r\n  // If we find nothing (0x0) then there is no contract deployed to that address\r\n  useEffect(() => {\r\n    // eslint-disable-next-line consistent-return\r\n    const checkDeployment = async () => {\r\n      if (!isAddress(contractAddress)) return false;\r\n      const bytecode = await provider.getCode(contractAddress);\r\n      setContractIsDeployed(bytecode !== \"0x0\");\r\n    };\r\n    if (provider) checkDeployment();\r\n  }, [provider, contractAddress]);\r\n\r\n  return contractIsDeployed;\r\n};\r\n\r\nexport default useContractExistsAtAddress;\r\n","/* eslint-disable import/no-dynamic-require */\r\n/* eslint-disable global-require */\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Loads your local contracts and gives options to read values from contracts\r\n  or write transactions into them\r\n\r\n  ~ How can I use? ~\r\n\r\n  const readContracts = useContractLoader(localProvider) // or\r\n  const writeContracts = useContractLoader(userProvider)\r\n\r\n  ~ Features ~\r\n\r\n  - localProvider enables reading values from contracts\r\n  - userProvider enables writing transactions into contracts\r\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\r\n    and using ContractReader.js hook:\r\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\r\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\r\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\r\n*/\r\n\r\nconst loadContract = (contractName, signer) => {\r\n  const newContract = new Contract(\r\n    require(`../contracts/${contractName}.address.js`),\r\n    require(`../contracts/${contractName}.abi.js`),\r\n    signer,\r\n  );\r\n  try {\r\n    newContract.bytecode = require(`../contracts/${contractName}.bytecode.js`);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return newContract;\r\n};\r\n\r\nexport default function useContractLoader(providerOrSigner) {\r\n  const [contracts, setContracts] = useState();\r\n  useEffect(() => {\r\n    async function loadContracts() {\r\n      if (typeof providerOrSigner !== \"undefined\") {\r\n        try {\r\n          // we need to check to see if this providerOrSigner has a signer or not\r\n          let signer;\r\n          let accounts;\r\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\r\n            accounts = await providerOrSigner.listAccounts();\r\n          }\r\n\r\n          if (accounts && accounts.length > 0) {\r\n            signer = providerOrSigner.getSigner();\r\n          } else {\r\n            signer = providerOrSigner;\r\n          }\r\n\r\n          const contractList = require(\"../contracts/contracts.js\");\r\n\r\n          const newContracts = contractList.reduce((accumulator, contractName) => {\r\n            accumulator[contractName] = loadContract(contractName, signer);\r\n            return accumulator;\r\n          }, {});\r\n          setContracts(newContracts);\r\n        } catch (e) {\r\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\r\n        }\r\n      }\r\n    }\r\n    loadContracts();\r\n  }, [providerOrSigner]);\r\n  return contracts;\r\n}\r\n","import { getAddress, isAddress } from \"@ethersproject/address\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// resolved if(name){} to not save \"\" into cache\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets ENS name from given address and provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const ensName = useLookupAddress(mainnetProvider, address);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address and get ENS name corresponding to given address\r\n*/\r\n\r\nconst lookupAddress = async (provider, address) => {\r\n  if (isAddress(address)) {\r\n    // console.log(`looking up ${address}`)\r\n    try {\r\n      // Accuracy of reverse resolution is not enforced.\r\n      // We then manually ensure that the reported ens name resolves to address\r\n      const reportedName = await provider.lookupAddress(address);\r\n\r\n      const resolvedAddress = await provider.resolveName(reportedName);\r\n\r\n      if (getAddress(address) === getAddress(resolvedAddress)) {\r\n        return reportedName;\r\n      }\r\n      return getAddress(address);\r\n    } catch (e) {\r\n      return getAddress(address);\r\n    }\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst useLookupAddress = (provider, address) => {\r\n  const [ensName, setEnsName] = useState(address);\r\n  // const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\r\n\r\n  useEffect(() => {\r\n    let cache = window.localStorage.getItem(\"ensCache_\" + address);\r\n    cache = cache && JSON.parse(cache);\r\n\r\n    if (cache && cache.timestamp > Date.now()) {\r\n      setEnsName(cache.name);\r\n    } else if (provider) {\r\n      lookupAddress(provider, address).then(name => {\r\n        if (name) {\r\n          setEnsName(name);\r\n          window.localStorage.setItem(\r\n            \"ensCache_\" + address,\r\n            JSON.stringify({\r\n              timestamp: Date.now() + 360000,\r\n              name,\r\n            }),\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }, [provider, address, setEnsName]);\r\n\r\n  return ensName;\r\n};\r\n\r\nexport default useLookupAddress;\r\n","// API token for nft.storage. Please sign up and replace this with your own key from https://nft.storage/manage/\r\nexport const NFT_STORAGE_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGEzQTM2NEJjMjQxNTc2RDU2OTg1NzJmMWRiN2FCNzJBY0M5MzkxNTkiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYzNTA1MzgwMTU4NCwibmFtZSI6IkxhdGloYW4ifQ.bhL-c22n6mDBA-iHu7hTwpxfC0eEFIrKEKlmUKDvv-k\";\r\n\r\n// Infura project ID. If you're building a real app based on this, please replace with your own from https://infura.io/dashboard/ethereum\r\nexport const INFURA_ID = \"9aa3d95b3bc440fa88ea12eaa4456161\";\r\n\r\n// Key for Etherscan.io. If you're building a real app based on this, please replace with your own from https://etherscan.io/myapikey\r\nexport const ETHERSCAN_KEY = \"6EAGC2DEG6PP3M1GP1I86QJPQAUE4ESW1W\";\r\n\r\n// BLOCKNATIVE ID FOR Notify.js:\r\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\r\n\r\n\r\nexport const DEFAULT_CONTRACT_NAME = \"NFTMinter\";\r\n\r\nexport const NETWORK = chainId => {\r\n  for (const n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  kovan: {\r\n    name: \"kovan\",\r\n    color: \"#7003DD\",\r\n    chainId: 42,\r\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://kovan.etherscan.io/\",\r\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\r\n  },\r\n  rinkeby: {\r\n    name: \"rinkeby\",\r\n    color: \"#e0d068\",\r\n    chainId: 4,\r\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\r\n    faucet: \"https://faucet.rinkeby.io/\",\r\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\r\n  },\r\n  ropsten: {\r\n    name: \"ropsten\",\r\n    color: \"#F60D09\",\r\n    chainId: 3,\r\n    faucet: \"https://faucet.ropsten.be/\",\r\n    blockExplorer: \"https://ropsten.etherscan.io/\",\r\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  xdai: {\r\n    name: \"xdai\",\r\n    color: \"#48a9a6\",\r\n    chainId: 100,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://dai.poa.network\",\r\n    faucet: \"https://xdai-faucet.top/\",\r\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\r\n  },\r\n  matic: {\r\n    name: \"matic\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\r\n  },\r\n};\r\n","import { Web3Provider } from \"@ethersproject/providers\";\r\nimport BurnerProvider from \"burner-provider\";\r\nimport { useMemo } from \"react\";\r\nimport { INFURA_ID } from \"../constants\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets user provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const userProvider = useUserProvider(injectedProvider, localProvider);\r\n\r\n  ~ Features ~\r\n\r\n  - Specify the injected provider from Metamask\r\n  - Specify the local provider\r\n  - Usage examples:\r\n    const address = useUserAddress(userProvider);\r\n    const tx = Transactor(userProvider, gasPrice)\r\n*/\r\n\r\nconst useUserProvider = (injectedProvider, localProvider) =>\r\n  useMemo(() => {\r\n    if (injectedProvider) {\r\n      console.log(\"🦊 Using injected provider\");\r\n      return injectedProvider;\r\n    }\r\n    if (!localProvider) return undefined;\r\n\r\n    const burnerConfig = {};\r\n\r\n    if (window.location.pathname) {\r\n      if (window.location.pathname.indexOf(\"/pk\") >= 0) {\r\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\r\n        let rawPK;\r\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\r\n          console.log(\"🔑 Incoming Private Key...\");\r\n          rawPK = incomingPK;\r\n          burnerConfig.privateKey = rawPK;\r\n          window.history.pushState({}, \"\", \"/\");\r\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\r\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n          }\r\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"🔥 Using burner provider\", burnerConfig);\r\n    if (localProvider.connection && localProvider.connection.url) {\r\n      burnerConfig.rpcUrl = localProvider.connection.url;\r\n      return new Web3Provider(new BurnerProvider(burnerConfig));\r\n    }\r\n    // eslint-disable-next-line no-underscore-dangle\r\n    const networkName = localProvider._network && localProvider._network.name;\r\n    burnerConfig.rpcUrl = `https://${networkName || \"mainnet\"}.infura.io/v3/${INFURA_ID}`;\r\n    return new Web3Provider(new BurnerProvider(burnerConfig));\r\n  }, [injectedProvider, localProvider]);\r\n\r\nexport default useUserProvider;\r\n","import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport { useLookupAddress } from \"../hooks\";\r\n\r\n// changed value={address} to address={address}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n*/\r\n\r\nconst { Text } = Typography;\r\n\r\nconst blockExplorerLink = (address, blockExplorer) =>\r\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\r\n\r\nexport default function Address(props) {\r\n  const address = props.value || props.address;\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let displayAddress = address.substr(0, 6);\r\n\r\n  if (ens && ens.indexOf(\"0x\") < 0) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let text;\r\n  if (props.onChange) {\r\n    text = (\r\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  } else {\r\n    text = (\r\n      <Text copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {text}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import { formatEther } from \"@ethersproject/units\";\r\nimport React, { useState } from \"react\";\r\nimport { useBalance } from \"../hooks\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n*/\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  // const [listening, setListening] = useState(false);\r\n\r\n  const balance = useBalance(props.provider, props.address);\r\n\r\n  let floatBalance = parseFloat(\"0.00\");\r\n\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") {\r\n    usingBalance = props.balance;\r\n  }\r\n  if (typeof props.value !== \"undefined\") {\r\n    usingBalance = props.value;\r\n  }\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  const price = props.price || props.dollarMultiplier;\r\n\r\n  if (price && dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n","import { hexlify } from \"@ethersproject/bytes\";\r\nimport { parseUnits } from \"@ethersproject/units\";\r\nimport { notification } from \"antd\";\r\nimport Notify from \"bnc-notify\";\r\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\n\r\nexport default function Transactor(provider, gasPrice, etherscan) {\r\n  if (typeof provider !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async tx => {\r\n      const signer = provider.getSigner();\r\n      const network = await provider.getNetwork();\r\n      console.log(\"network\", network);\r\n      const options = {\r\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n        system: \"ethereum\",\r\n        networkId: network.chainId,\r\n        // darkMode: Boolean, // (default: false)\r\n        transactionHandler: txInformation => {\r\n          console.log(\"HANDLE TX\", txInformation);\r\n        },\r\n      };\r\n      const notify = Notify(options);\r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = hexlify(120000);\r\n          }\r\n          console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if ([1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Local Transaction Sent\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        console.log(e);\r\n        console.log(\"Transaction Error:\", e.message);\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: e.message,\r\n        });\r\n      }\r\n    };\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { Badge, Input } from \"antd\";\r\nimport { useLookupAddress } from \"eth-hooks\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport Blockie from \"./Blockie\";\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address input with QR scan option\r\n\r\n  ~ How can I use? ~\r\n\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n*/\r\n\r\nexport default function AddressInput(props) {\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const scannerButton = (\r\n    <div\r\n      style={{ marginTop: 4, cursor: \"pointer\" }}\r\n      onClick={() => {\r\n        setScan(!scan);\r\n      }}\r\n    >\r\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n        <QrcodeOutlined style={{ fontSize: 18 }} />\r\n      </Badge>{\" \"}\r\n      Scan\r\n    </div>\r\n  );\r\n\r\n  const { ensProvider, onChange } = props;\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  const scanner = scan ? (\r\n    <div\r\n      style={{\r\n        zIndex: 256,\r\n        position: \"absolute\",\r\n        left: 0,\r\n        top: 0,\r\n        width: \"100%\",\r\n      }}\r\n      onClick={() => {\r\n        setScan(false);\r\n      }}\r\n    >\r\n      <QrReader\r\n        delay={250}\r\n        resolution={1200}\r\n        onError={e => {\r\n          console.log(\"SCAN ERROR\", e);\r\n          setScan(false);\r\n        }}\r\n        onScan={newValue => {\r\n          if (newValue) {\r\n            console.log(\"SCAN VALUE\", newValue);\r\n            let possibleNewValue = newValue;\r\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n              console.log(\"CLEANED VALUE\", possibleNewValue);\r\n            }\r\n            setScan(false);\r\n            updateAddress(possibleNewValue);\r\n          }\r\n        }}\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scanner}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ens || currentValue}\r\n        addonAfter={scannerButton}\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    if (!props.price) return \"\";\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"USD\") {\r\n            setMode(\"ETH\");\r\n            setDisplay(currentValue);\r\n          } else {\r\n            setMode(\"USD\");\r\n            if (currentValue) {\r\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n              setDisplay(usdValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let prefix;\r\n  let addonAfter;\r\n  if (mode === \"USD\") {\r\n    prefix = \"$\";\r\n    addonAfter = option(\"USD 🔀\");\r\n  } else {\r\n    prefix = \"Ξ\";\r\n    addonAfter = option(\"ETH 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={prefix}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport { parseEther } from \"@ethersproject/units\";\r\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport { useUserAddress } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\nimport QR from \"qrcode.react\";\r\nimport React, { useState } from \"react\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n*/\r\n\r\nexport default function Wallet(props) {\r\n  const signerAddress = useUserAddress(props.provider);\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const providerSend = props.provider ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          console.log(key);\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      display = (\r\n        <div>\r\n          <b>Private Key:</b>\r\n\r\n          <div>\r\n            <Text copyable>{pk}</Text>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <i>\r\n            Point your camera phone at qr code to open in\r\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\r\n              burner wallet\r\n            </a>\r\n            :\r\n          </i>\r\n          <QR\r\n            value={\"https://xdai.io/\" + pk}\r\n            size=\"450\"\r\n            level=\"H\"\r\n            includeMargin\r\n            renderAs=\"svg\"\r\n            imageSettings={{ excavate: false }}\r\n          />\r\n\r\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\r\n            {\"https://xdai.io/\" + pk}\r\n          </Paragraph>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton,\r\n          receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={!amount || !toAddress || qr}\r\n            loading={false}\r\n            onClick={() => {\r\n              const tx = Transactor(props.provider);\r\n\r\n              let value;\r\n              try {\r\n                value = parseEther(\"\" + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              tx({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n              setOpen(!open);\r\n              setQr();\r\n            }}\r\n          >\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport Wallet from \"./Wallet\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n*/\r\n\r\nexport default function Account({\r\n  address,\r\n  userProvider,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n}) {\r\n  const modalButtons = [];\r\n  if (web3Modal) {\r\n    if (web3Modal.cachedProvider) {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"logoutbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          onClick={logoutOfWeb3Modal}\r\n        >\r\n          logout\r\n        </Button>,\r\n      );\r\n    } else {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"loginbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\r\n          onClick={loadWeb3Modal}\r\n        >\r\n          connect\r\n        </Button>,\r\n      );\r\n    }\r\n  }\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  const display = minimized ? (\r\n    \"\"\r\n  ) : (\r\n    <span>\r\n      {address ? (\r\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\r\n      ) : (\r\n        \"Connecting...\"\r\n      )}\r\n      <Balance address={address} provider={localProvider} price={price} />\r\n      <Wallet\r\n        address={address}\r\n        provider={userProvider}\r\n        ensProvider={mainnetProvider}\r\n        price={price}\r\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n      />\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {display}\r\n      {modalButtons}\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n*/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n              /* in case user enters invalid bytes32 number,\r\n                   it considers it as string and converts to bytes32 */\r\n              const changedValue = utils.formatBytes32String(currentValue);\r\n              setDisplay(changedValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          } else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          // const ethValue = parseFloat(newValue) / props.price;\r\n          // setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { formatUnits } from \"@ethersproject/units\";\r\nimport React from \"react\";\r\nimport { Address } from \"..\";\r\n\r\nconst tryToDisplay = thing => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      return \"Ξ\" + formatUnits(thing, \"ether\");\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return <Address address={thing} fontSize={22} />;\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nexport default tryToDisplay;\r\n","/* eslint-disable jsx-a11y/accessible-emoji */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport { Col, Divider, Row } from \"antd\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\r\n  const [variable, setVariable] = useState(\"\");\r\n\r\n  const refresh = useCallback(async () => {\r\n    try {\r\n      const funcResponse = await contractFunction();\r\n      setVariable(funcResponse);\r\n      triggerRefresh(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [setVariable, contractFunction, triggerRefresh]);\r\n\r\n  useEffect(() => {\r\n    refresh();\r\n  }, [refresh, refreshRequired, contractFunction]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={14}>\r\n          <h2>{tryToDisplay(variable)}</h2>\r\n        </Col>\r\n        <Col span={2}>\r\n          <h2>\r\n            <a href=\"#\" onClick={refresh}>\r\n              🔄\r\n            </a>\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVariable;\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../../helpers\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  let inputIndex = 0;\r\n  const inputs = functionInfo.inputs.map(input => {\r\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const buttonIcon =\r\n    functionInfo.type === \"call\" ? (\r\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n    );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              let innerIndex = 0;\r\n              const args = functionInfo.inputs.map(input => {\r\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\r\n                let value = form[key];\r\n                if (input.baseType === \"array\") {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                const returned = await contractFunction(...args);\r\n                result = tryToDisplay(returned);\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import { Card } from \"antd\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport { useContractExistsAtAddress, useContractLoader } from \"../../hooks\";\r\nimport Account from \"../Account\";\r\nimport DisplayVariable from \"./DisplayVariable\";\r\nimport FunctionForm from \"./FunctionForm\";\r\n\r\nconst noContractDisplay = (\r\n  <div>\r\n    Loading...{\" \"}\r\n    <div style={{ padding: 32 }}>\r\n      You need to run{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run chain\r\n      </span>{\" \"}\r\n      and{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      to see your contract here.\r\n    </div>\r\n    <div style={{ padding: 32 }}>\r\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\r\n        ☢️\r\n      </span>\r\n      Warning: You might need to run\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      <i>again</i> after the frontend comes up!\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\r\n\r\nexport default function Contract({\r\n  customContract,\r\n  account,\r\n  gasPrice,\r\n  signer,\r\n  provider,\r\n  name,\r\n  show,\r\n  price,\r\n  blockExplorer,\r\n}) {\r\n  const contracts = useContractLoader(provider);\r\n  let contract;\r\n  if (!customContract) {\r\n    contract = contracts ? contracts[name] : \"\";\r\n  } else {\r\n    contract = customContract;\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\r\n\r\n  const displayedContractFunctions = useMemo(\r\n    () =>\r\n      contract\r\n        ? Object.values(contract.interface.functions).filter(\r\n            fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\r\n          )\r\n        : [],\r\n    [contract, show],\r\n  );\r\n\r\n  const [refreshRequired, triggerRefresh] = useState(false);\r\n  const contractDisplay = displayedContractFunctions.map(fn => {\r\n    if (isQueryable(fn)) {\r\n      // If there are no inputs, just display return value\r\n      return (\r\n        <DisplayVariable\r\n          key={fn.name}\r\n          contractFunction={contract[fn.name]}\r\n          functionInfo={fn}\r\n          refreshRequired={refreshRequired}\r\n          triggerRefresh={triggerRefresh}\r\n        />\r\n      );\r\n    }\r\n    // If there are inputs, display a form to allow users to provide these\r\n    return (\r\n      <FunctionForm\r\n        key={\"FF\" + fn.name}\r\n        contractFunction={\r\n          fn.stateMutability === \"view\" || fn.stateMutability === \"pure\"\r\n            ? contract[fn.name]\r\n            : contract.connect(signer)[fn.name]\r\n        }\r\n        functionInfo={fn}\r\n        provider={provider}\r\n        gasPrice={gasPrice}\r\n        triggerRefresh={triggerRefresh}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div>\r\n            {name}\r\n            <div style={{ float: \"right\" }}>\r\n              <Account\r\n                address={address}\r\n                localProvider={provider}\r\n                injectedProvider={provider}\r\n                mainnetProvider={provider}\r\n                price={price}\r\n                blockExplorer={blockExplorer}\r\n              />\r\n              {account}\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={contractDisplay && contractDisplay.length <= 0}\r\n      >\r\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { PageHeader } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// displays a page header\r\n\r\nexport default function Header() {\r\n  return (\r\n    <a href=\"https://nftschool.dev\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <PageHeader\r\n        title=\"🎟 NFT School e2e example\"\r\n        subTitle=\"join us at nftschool.dev\"\r\n        style={{ cursor: \"pointer\" }}\r\n      />\r\n    </a>\r\n  );\r\n}\r\n","import { Card, Upload, Input, Button, Col } from \"antd\";\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport React, { useState } from \"react\";\r\nimport { NFTStorage } from 'nft.storage';\r\nimport { useContractLoader } from \"../hooks\";\r\nimport Account from \"./Account\";\r\nimport { Transactor } from \"../helpers\";\r\nimport { NFT_STORAGE_KEY, DEFAULT_CONTRACT_NAME } from \"../constants\";\r\n\r\nasync function mintNFT({contract, ownerAddress, provider, gasPrice, setStatus, image, name, description}) {\r\n\r\n  // First we use the nft.storage client library to add the image and metadata to IPFS / Filecoin\r\n  const client = new NFTStorage({ token: NFT_STORAGE_KEY });\r\n  setStatus(\"Uploading to nft.storage...\")\r\n  const metadata = await client.store({\r\n    name,\r\n    description,\r\n    image,\r\n  });\r\n  setStatus(`Upload complete! Minting token with metadata URI: ${metadata.url}`);\r\n\r\n  // the returned metadata.url has the IPFS URI we want to add.\r\n  // our smart contract already prefixes URIs with \"ipfs://\", so we remove it before calling the `mintToken` function\r\n  const metadataURI = metadata.url.replace(/^ipfs:\\/\\//, \"\");\r\n\r\n  // scaffold-eth's Transactor helper gives us a nice UI popup when a transaction is sent\r\n  const transactor = Transactor(provider, gasPrice);\r\n  const tx = await transactor(contract.mintToken(ownerAddress, metadataURI));\r\n\r\n  setStatus(\"Blockchain transaction sent, waiting confirmation...\");\r\n\r\n  // Wait for the transaction to be confirmed, then get the token ID out of the emitted Transfer event.\r\n  const receipt = await tx.wait();\r\n  let tokenId = null;\r\n  for (const event of receipt.events) {\r\n    if (event.event !== 'Transfer') {\r\n        continue\r\n    }\r\n    tokenId = event.args.tokenId.toString();\r\n    break;\r\n  }\r\n  setStatus(`Minted token #${tokenId}`);\r\n  return tokenId;\r\n}\r\n\r\nexport default function Minter({\r\n  customContract,\r\n  account,\r\n  gasPrice,\r\n  signer,\r\n  provider,\r\n  name,\r\n  price,\r\n  blockExplorer,\r\n}) {\r\n  const contracts = useContractLoader(signer);\r\n  let contract;\r\n  if (!name) {\r\n    name = DEFAULT_CONTRACT_NAME;\r\n  }\r\n  if (!customContract) {\r\n    contract = contracts ? contracts[name] : \"\";\r\n  } else {\r\n    contract = customContract;\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n\r\n  const [file, setFile] = useState(null);\r\n  const [previewURL, setPreviewURL] = useState(null);\r\n  const [nftName, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [minting, setMinting] = useState(false);\r\n  const [status, setStatus] = useState(\"\");\r\n  const [tokenId, setTokenId] = useState(null);\r\n\r\n  const beforeUpload = (file, fileList) => {\r\n    console.log(file, fileList);\r\n    setFile(file);\r\n    setPreviewURL(URL.createObjectURL(file));\r\n    return false;\r\n  }\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      <PlusOutlined />\r\n      <div style={{ marginTop: 8 }}>\r\n        Choose image\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const uploadView = (\r\n    <div>\r\n      Drop an image file or click below to select.\r\n      <Upload\r\n        name=\"avatar\"\r\n        accept=\".jpeg,.jpg,.png,.gif\"\r\n        listType=\"picture-card\"\r\n        className=\"avatar-uploader\"\r\n        showUploadList={false}\r\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n        beforeUpload={beforeUpload}\r\n      >\r\n        {uploadButton}\r\n      </Upload>\r\n    </div>\r\n  );\r\n\r\n  const preview = previewURL ? <img src={previewURL} style={{maxWidth: \"800px\"}}/> : <div/>\r\n\r\n  const nameField = (\r\n    <Input placeholder=\"Enter a name for your NFT\" onChange={e => {\r\n      setName(e.target.value);\r\n    }}/>\r\n  );\r\n\r\n  const descriptionField = (\r\n    <Input.TextArea placeholder=\"Enter a description\" onChange={e => {\r\n      setDescription(e.target.value);\r\n    }}/>\r\n  );\r\n\r\n  const mintEnabled = file != null && !!nftName;\r\n\r\n  const startMinting = () => {\r\n    console.log(`minting nft with name ${nftName}`);\r\n    setMinting(true);\r\n    signer.getAddress().then(ownerAddress => {\r\n      mintNFT({ \r\n        contract, \r\n        provider, \r\n        ownerAddress, \r\n        gasPrice, \r\n        setStatus,\r\n        name: nftName, \r\n        image: file, \r\n        description \r\n      }).then(newTokenId => {\r\n        setMinting(false);\r\n        console.log('minting complete');\r\n        setTokenId(newTokenId);\r\n      })\r\n    });\r\n  }\r\n  \r\n  const mintButton = (\r\n    <Button type=\"primary\" disabled={!mintEnabled} onClick={startMinting}>\r\n      {minting ? <LoadingOutlined/> : \"Mint!\"}\r\n    </Button>\r\n  )\r\n  \r\n  const minterForm = (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div>\r\n            {name}\r\n            <div style={{ float: \"right\" }}>\r\n              <Account\r\n                address={address}\r\n                localProvider={provider}\r\n                injectedProvider={provider}\r\n                mainnetProvider={provider}\r\n                price={price}\r\n                blockExplorer={blockExplorer}\r\n              />\r\n              {account}\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={false}\r\n      >\r\n        { file == null && uploadView }\r\n        {preview}\r\n        {nameField}\r\n        {descriptionField}\r\n        {mintButton}\r\n        {status}\r\n      </Card>\r\n    </div>\r\n  );\r\n\r\n\r\n  return minterForm;\r\n}\r\n","import { Card, Upload, Input, InputNumber, Space } from \"antd\";\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport React, { useState } from \"react\";\r\nimport { useContractLoader } from \"../hooks\";\r\nimport Account from \"./Account\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst DEFAULT_CONTRACT_NAME = \"NFTMinter\";\r\n\r\n// rewrite ipfs:// uris to dweb.link gateway URLs\r\nfunction makeGatewayURL(ipfsURI) {\r\n  return ipfsURI.replace(/^ipfs:\\/\\//, \"https://dweb.link/ipfs/\");\r\n}\r\n\r\nasync function fetchIPFSJSON(ipfsURI) {\r\n  const url = makeGatewayURL(ipfsURI);\r\n  const resp = await fetch(url);\r\n  return resp.json();\r\n}\r\n\r\nasync function getNFT({contract, provider, tokenId}) {\r\n  const metadataURI = await contract.tokenURI(tokenId);\r\n  console.log('metadata uri: ', metadataURI);\r\n  \r\n  const metadata = await fetchIPFSJSON(metadataURI);\r\n  console.log('metadata: ', metadata)\r\n\r\n  if (metadata.image) {\r\n    metadata.image = makeGatewayURL(metadata.image);\r\n  }\r\n\r\n  return metadata;\r\n}\r\n\r\nfunction NFTCard({\r\n  contract,\r\n  provider,\r\n  tokenId,\r\n  nftData,\r\n}) {\r\n  return (\r\n    <Card>\r\n      <img src={nftData.image} style={{maxWidth: \"800px\"}}/>\r\n      <div>\r\n        Name: {nftData.name}\r\n      </div>\r\n      <div>\r\n        Description: {nftData.description}\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default function NFTViewer({\r\n  customContract,\r\n  account,\r\n  gasPrice,\r\n  signer,\r\n  provider,\r\n  name,\r\n  price,\r\n  blockExplorer,\r\n}) {\r\n  const contracts = useContractLoader(provider);\r\n  let contract;\r\n  if (!name) {\r\n    name = DEFAULT_CONTRACT_NAME;\r\n  }\r\n  if (!customContract) {\r\n    contract = contracts ? contracts[name] : \"\";\r\n  } else {\r\n    contract = customContract;\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n\r\n  const [selectedToken, setSelectedToken] = useState(null);\r\n  const [nftData, setNFTData] = useState(null);\r\n  const [loading, setLoading] = useState(selectedToken && !nftData);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  let tokenView = \"\";\r\n  if (nftData) {\r\n    tokenView = NFTCard({ contract, provider, tokenId: selectedToken, nftData });\r\n  }\r\n\r\n  let errorView = \"\";\r\n  if (errorMessage) {\r\n    errorView = <div>\r\n      <span style={{color: \"red\"}}>{errorMessage}</span>\r\n    </div>;\r\n  }\r\n\r\n  const tokenIdChanged = newTokenId => {\r\n    if (!newTokenId) {\r\n      return;\r\n    }\r\n    setSelectedToken(newTokenId);\r\n    setLoading(true);\r\n    getNFT({ contract, provider, tokenId: newTokenId }).then(nft => {\r\n      setNFTData(nft);\r\n      setLoading(false);\r\n      setErrorMessage(\"\");\r\n    }).catch(e => {\r\n      console.log('error getting token: ', e);\r\n      setLoading(false);\r\n      setErrorMessage(e.message);\r\n      setNFTData(null);\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div>\r\n            View an NFT\r\n            <div style={{ float: \"right\" }}>\r\n              <Account\r\n                address={address}\r\n                localProvider={provider}\r\n                injectedProvider={provider}\r\n                mainnetProvider={provider}\r\n                price={price}\r\n                blockExplorer={blockExplorer}\r\n              />\r\n              {account}\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={false}\r\n      >\r\n        <Space>\r\n          Token ID:\r\n          <InputNumber value={selectedToken} onChange={tokenIdChanged}/>\r\n        </Space>\r\n        {loading && <LoadingOutlined/>}\r\n        {tokenView}\r\n        {errorView}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { formatUnits, parseUnits } from \"@ethersproject/units\";\r\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\r\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  InputNumber,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  }\r\n  console.log(\"no call of that name!\");\r\n};\r\n\r\nconst defaultToken = \"ETH\";\r\nconst defaultTokenOut = \"DAI\";\r\nconst defaultSlippage = \"0.5\";\r\nconst defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n\r\n  const [tokens, setTokens] = useState();\r\n\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  const signer = selectedProvider.getSigner();\r\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\r\n\r\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      console.log(_tokenListUri);\r\n      try {\r\n        const tokenList = await fetch(_tokenListUri);\r\n        const tokenListJson = await tokenList.json();\r\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        const ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        const _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        const _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListURI]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      const baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      const listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [slippageTolerance, amountIn, amountOut, trades]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      const accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  const route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item.symbol;\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    const approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    const approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    const approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    const removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      const metadata = {};\r\n\r\n      let call;\r\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      const path = trades[0].route.path.map(function (item) {\r\n        return item.address;\r\n      });\r\n      console.log(path);\r\n      const accountList = await selectedProvider.listAccounts();\r\n      const address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        const _amountIn = ethers.utils.hexlify(parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata.value = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        const _amountOut = ethers.utils.hexlify(parseUnits(amountOut.toString(), tokens[tokenOut].decimals));\r\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata.value = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      const result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  const insufficientBalance = balanceIn\r\n    ? parseFloat(formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const inputIsToken = tokenIn !== \"ETH\";\r\n  const insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const formattedBalanceIn = balanceIn\r\n    ? parseFloat(formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  const formattedBalanceOut = balanceOut\r\n    ? parseFloat(formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  const metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  const metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  const priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  const priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  const swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size=\"large\"\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size=\"large\"\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            <InputNumber\r\n              defaultValue={defaultSlippage}\r\n              min={0}\r\n              max={100}\r\n              precision={2}\r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace(\"%\", \"\")}\r\n              onChange={value => {\r\n                console.log(value);\r\n\r\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                setSlippageTolerance(slippagePercent);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            <InputNumber\r\n              min={0}\r\n              max={3600}\r\n              defaultValue={defaultTimeLimit}\r\n              onChange={value => {\r\n                console.log(value);\r\n                setTimeLimit(value);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import { Switch } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\r\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = isChecked => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  // Avoid theme change flicker\r\n  // if (status === \"loading\") {\r\n  //   return null;\r\n  // }\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\r\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\r\nimport { Timeline, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","import { StaticJsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\r\nimport { formatEther, parseEther } from \"@ethersproject/units\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { Alert, Button, Col, Menu, Row } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport { useUserAddress } from \"eth-hooks\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\r\nimport Web3Modal from \"web3modal\";\r\nimport \"./App.css\";\r\nimport { Account, Contract, Faucet, GasGauge, Header, Minter, NFTViewer, Ramp, ThemeSwitch } from \"./components\";\r\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\r\nimport { Transactor } from \"./helpers\";\r\nimport {\r\n  useBalance,\r\n  useContractLoader,\r\n  useContractReader,\r\n  useEventListener,\r\n  useExchangePrice,\r\n  useExternalContractLoader,\r\n  useGasPrice,\r\n  useOnBlock,\r\n  useUserProvider,\r\n} from \"./hooks\";\r\n\r\n/// 📡 What chain are your contracts deployed to?\r\nconst targetNetwork = NETWORKS.kovan; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\r\n\r\n// 😬 Sorry for all the console logging\r\nconst DEBUG = true;\r\n\r\n// 🛰 providers\r\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\r\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\r\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\r\n//\r\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\r\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\r\nconst scaffoldEthProvider = new StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\");\r\nconst mainnetInfura = new StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID);\r\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I\r\n\r\n// 🏠 Your local provider is usually pointed at your local blockchain\r\nconst localProviderUrl = targetNetwork.rpcUrl;\r\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\r\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\r\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\r\nconst localProvider = new StaticJsonRpcProvider(localProviderUrlFromEnv);\r\n\r\n// 🔭 block explorer URL\r\nconst blockExplorer = targetNetwork.blockExplorer;\r\n\r\n/*\r\n  Web3 modal helps us \"connect\" external wallets:\r\n*/\r\nconst web3Modal = new Web3Modal({\r\n  // network: \"mainnet\", // optional\r\n  cacheProvider: true, // optional\r\n  providerOptions: {\r\n    walletconnect: {\r\n      package: WalletConnectProvider, // required\r\n      options: {\r\n        infuraId: INFURA_ID,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst logoutOfWeb3Modal = async () => {\r\n  await web3Modal.clearCachedProvider();\r\n  setTimeout(() => {\r\n    window.location.reload();\r\n  }, 1);\r\n};\r\n\r\nfunction App(props) {\r\n  const mainnetProvider = scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\r\n\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\r\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\r\n\r\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\r\n  const userProvider = useUserProvider(injectedProvider, localProvider);\r\n  const address = useUserAddress(userProvider);\r\n\r\n  // You can warn the user if you would like them to be on a specific network\r\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\r\n  const selectedChainId = userProvider && userProvider._network && userProvider._network.chainId;\r\n\r\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\r\n\r\n  // The transactor wraps transactions and provides notificiations\r\n  const tx = Transactor(userProvider, gasPrice);\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  // Just plug in different 🛰 providers to get your balance on different chains:\r\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\r\n\r\n  // Load in your local 📝 contract and read a value from it:\r\n  const readContracts = useContractLoader(localProvider);\r\n\r\n  // If you want to make 🔐 write transactions to your contracts, use the userProvider:\r\n  const writeContracts = useContractLoader(userProvider);\r\n\r\n\r\n  /*\r\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\r\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\r\n  */\r\n\r\n  //\r\n  // 🧫 DEBUG 👨🏻‍🔬\r\n  //\r\n  useEffect(() => {\r\n    if (\r\n      DEBUG &&\r\n      mainnetProvider &&\r\n      address &&\r\n      selectedChainId &&\r\n      yourLocalBalance &&\r\n      yourMainnetBalance &&\r\n      readContracts &&\r\n      writeContracts\r\n    ) {\r\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\r\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\r\n      console.log(\"🏠 localChainId\", localChainId);\r\n      console.log(\"👩‍💼 selected address:\", address);\r\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\r\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? formatEther(yourLocalBalance) : \"...\");\r\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? formatEther(yourMainnetBalance) : \"...\");\r\n      console.log(\"📝 readContracts\", readContracts);\r\n      console.log(\"🔐 writeContracts\", writeContracts);\r\n    }\r\n  }, [\r\n    mainnetProvider,\r\n    address,\r\n    selectedChainId,\r\n    yourLocalBalance,\r\n    yourMainnetBalance,\r\n    readContracts,\r\n    writeContracts,\r\n  ]);\r\n\r\n  let networkDisplay = \"\";\r\n  if (localChainId && selectedChainId && localChainId !== selectedChainId) {\r\n    const networkSelected = NETWORK(selectedChainId);\r\n    const networkLocal = NETWORK(localChainId);\r\n    if (selectedChainId === 1337 && localChainId === 31337) {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network ID\"\r\n            description={\r\n              <div>\r\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\r\n                HardHat.\r\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network\"\r\n            description={\r\n              <div>\r\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\r\n                <b>{networkLocal && networkLocal.name}</b>.\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    networkDisplay = (\r\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    const provider = await web3Modal.connect();\r\n    setInjectedProvider(new Web3Provider(provider));\r\n  }, [setInjectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n  }, [loadWeb3Modal]);\r\n\r\n  const [route, setRoute] = useState();\r\n  useEffect(() => {\r\n    setRoute(window.location.pathname);\r\n  }, [setRoute]);\r\n\r\n  let faucetHint = \"\";\r\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name === \"localhost\";\r\n\r\n  if (faucetAvailable) {\r\n    faucetHint = (\r\n      <div style={{ padding: 16 }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            faucetTx({\r\n              to: address,\r\n              value: parseEther(\"0.01\"),\r\n            });\r\n          }}\r\n        >\r\n          💰 Grab funds from the faucet ⛽️\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      {networkDisplay}\r\n      <BrowserRouter>\r\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\r\n        <Menu.Item key=\"/\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/\");\r\n              }}\r\n              to=\"/\"\r\n            >\r\n              Mint an NFT\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/view\">\r\n            <Link\r\n              onClick={() => { setRoute(\"/view\"); }}\r\n              to=\"/view\">View an NFT</Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/contract\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/contract\");\r\n              }}\r\n              to=\"/contract\"\r\n            >\r\n              NFTMinter Contract\r\n            </Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n          <Minter\r\n              signer={userProvider.getSigner()}\r\n              provider={localProvider}\r\n              address={address}\r\n              blockExplorer={blockExplorer}\r\n            />\r\n          </Route>\r\n\r\n          <Route path=\"/view\">\r\n              <NFTViewer\r\n                provider={localProvider}\r\n                address={address}\r\n                blockExplorer={blockExplorer}\r\n              />\r\n          </Route>\r\n\r\n          <Route exact path=\"/contract\">\r\n            <Contract\r\n              name=\"NFTMinter\"\r\n              signer={userProvider.getSigner()}\r\n              provider={localProvider}\r\n              address={address}\r\n              blockExplorer={blockExplorer}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n\r\n      <ThemeSwitch />\r\n\r\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\r\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\r\n        <Account\r\n          address={address}\r\n          localProvider={localProvider}\r\n          userProvider={userProvider}\r\n          mainnetProvider={mainnetProvider}\r\n          price={price}\r\n          web3Modal={web3Modal}\r\n          loadWeb3Modal={loadWeb3Modal}\r\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n          blockExplorer={blockExplorer}\r\n        />\r\n        {faucetHint}\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n/* eslint-disable */\r\nwindow.ethereum &&\r\n  window.ethereum.on(\"chainChanged\", chainId => {\r\n    web3Modal.cachedProvider &&\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 1);\r\n  });\r\n\r\nwindow.ethereum &&\r\n  window.ethereum.on(\"accountsChanged\", accounts => {\r\n    web3Modal.cachedProvider &&\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 1);\r\n  });\r\n/* eslint-enable */\r\n\r\nexport default App;\r\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\r\nimport { usePoller } from \"eth-hooks\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\r\n  const [price, setPrice] = useState(0);\r\n\r\n  const pollPrice = () => {\r\n    async function getPrice() {\r\n      if (targetNetwork.price) {\r\n        setPrice(targetNetwork.price);\r\n      } else {\r\n        const DAI = new Token(\r\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\r\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n          18,\r\n        );\r\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\r\n        const route = new Route([pair], WETH[DAI.chainId]);\r\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\r\n      }\r\n    }\r\n    getPrice();\r\n  };\r\n  usePoller(pollPrice, pollTime || 9777);\r\n\r\n  return price;\r\n}\r\n","import axios from \"axios\";\r\nimport { usePoller } from \"eth-hooks\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function useGasPrice(targetNetwork, speed) {\r\n  const [gasPrice, setGasPrice] = useState();\r\n  const loadGasPrice = async () => {\r\n    if (targetNetwork.gasPrice) {\r\n      setGasPrice(targetNetwork.gasPrice);\r\n    } else {\r\n      axios\r\n        .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\r\n        .then(response => {\r\n          const newGasPrice = response.data[speed || \"fast\"] * 100000000;\r\n          if (newGasPrice !== gasPrice) {\r\n            setGasPrice(newGasPrice);\r\n          }\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n  };\r\n\r\n  usePoller(loadGasPrice, 39999);\r\n  return gasPrice;\r\n}\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\r\n      <App subgraphUri={subgraphUri} />\r\n    </ThemeSwitcherProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n"],"sourceRoot":""}